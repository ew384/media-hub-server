[0;35m
🚀 修复后的 Auth API 测试
📋 验证目标:
   ✓ 认证接口返回直接格式（不包装）
   ✓ 其他接口返回包装格式
   ✓ 频率限制正常工作
   ✓ 错误处理格式正确
🌐 测试地址: http://localhost:3100/api/v1
📧 测试邮箱: test_fixed_1758176665@example.com
[0m
[0;32m✅ 服务器连接正常[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m1. 健康检查测试[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m🧪 测试: 健康检查接口[0m
[0;34m   请求: GET /health[0m
{
  "code": 200,
  "message": "success",
  "data": {
    "status": "ok",
    "timestamp": "2025-09-18T06:24:25.239Z",
    "uptime": 2645.408187193,
    "database": "connected",
    "redis": "connected"
  },
  "timestamp": "2025-09-18T06:24:25.241Z"
}
[0;34m   ℹ️  HTTP状态码: 200[0m
[0;32m   ✅ 健康检查通过 - 包装格式正确[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m2. 短信接口测试[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m🧪 测试: 验证无效验证码[0m
[0;34m   请求: POST /sms/verify[0m
{
  "code": 200,
  "message": "success",
  "data": {
    "valid": false
  },
  "timestamp": "2025-09-18T06:24:25.348Z"
}
[0;34m   ℹ️  HTTP状态码: 200[0m
[0;32m   ✅ 验证码验证接口正常 - 包装格式，valid=false[0m

[0;36m🧪 测试: 发送验证码(预期失败)[0m
[0;34m   请求: POST /sms/send[0m
{
  "code": 500,
  "message": "短信发送失败，请稍后重试",
  "data": null,
  "timestamp": "2025-09-18T06:24:25.454Z",
  "path": "/api/v1/sms/send",
  "method": "POST"
}
[0;34m   ℹ️  HTTP状态码: 500[0m
[0;32m   ✅ 短信发送失败符合预期 - 错误格式正确[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m3. 用户注册测试 - 检查响应格式修复[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m🧪 测试: 邮箱注册[0m
[0;34m   请求: POST /auth/register[0m
{
  "user": {
    "id": 24,
    "username": "修复测试用户1424",
    "avatarUrl": null,
    "status": 1,
    "createdAt": "2025-09-18T06:24:25.789Z",
    "updatedAt": "2025-09-18T06:24:25.789Z",
    "email": "t*******************5@example.com"
  },
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjI0LCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNzU4MTc2NjY1LCJleHAiOjE3NTgxODAyNjV9.KjLXPSQi0HXlJGrk1D9fN5wxiZz1cdLxFeByhrbP-Nw",
  "refreshToken": "5d15c8b7-a612-4408-ba95-77ef15da6118"
}
[0;34m   ℹ️  HTTP状态码: 201[0m
[0;32m   ✅ 注册成功 - 直接格式正确（符合文档）[0m
[0;34m   ℹ️  Access Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjI0L...[0m
[0;34m   ℹ️  Refresh Token: 5d15c8b7-a612-4408-ba95-77ef15da6118...[0m
[0;32m   ✅ 用户信息格式完整[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m4. 用户登录测试 - 检查响应格式修复[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m🧪 测试: 邮箱登录[0m
[0;34m   请求: POST /auth/login[0m
{
  "user": {
    "id": 24,
    "username": "修复测试用户1424",
    "avatarUrl": null,
    "status": 1,
    "createdAt": "2025-09-18T06:24:25.789Z",
    "updatedAt": "2025-09-18T06:24:25.789Z",
    "email": "t*******************5@example.com"
  },
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjI0LCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNzU4MTc2NjY2LCJleHAiOjE3NTgxODAyNjZ9.3zozDNecOFBXEeMV51SAHNkOopyQFH-WaI7bIoxWN3g",
  "refreshToken": "c45e343e-d69e-4082-8d06-00cbe0f9cb35"
}
[0;34m   ℹ️  HTTP状态码: 200[0m
[0;32m   ✅ 登录成功 - 直接格式正确（符合文档）[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m5. 认证接口测试 - 检查响应格式修复[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m🧪 测试: 获取用户资料[0m
[0;34m   请求: GET /auth/profile[0m
{
  "id": 24,
  "username": "修复测试用户1424",
  "avatarUrl": null,
  "status": 1,
  "createdAt": "2025-09-18T06:24:25.789Z",
  "updatedAt": "2025-09-18T06:24:25.789Z",
  "email": "t*******************5@example.com"
}
[0;34m   ℹ️  HTTP状态码: 200[0m
[0;32m   ✅ 获取资料成功 - 直接格式正确[0m

[0;36m🧪 测试: 更新用户资料[0m
[0;34m   请求: PUT /auth/profile[0m
{
  "id": 24,
  "username": "修复测试用户1424更新版",
  "avatarUrl": null,
  "status": 1,
  "createdAt": "2025-09-18T06:24:25.789Z",
  "updatedAt": "2025-09-18T06:24:26.655Z",
  "email": "t*******************5@example.com"
}
[0;34m   ℹ️  HTTP状态码: 200[0m
[0;32m   ✅ 更新资料成功 - 直接格式正确[0m

[0;36m🧪 测试: 获取用户资料(/users)[0m
[0;34m   请求: GET /users/profile[0m
{
  "id": 24,
  "username": "修复测试用户1424更新版",
  "avatarUrl": null,
  "status": 1,
  "createdAt": "2025-09-18T06:24:25.789Z",
  "updatedAt": "2025-09-18T06:24:26.655Z",
  "email": "t*******************5@example.com"
}
[0;34m   ℹ️  HTTP状态码: 200[0m
[0;32m   ✅ Users模块资料获取 - 直接格式正确[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m6. Token操作测试[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m🧪 测试: 刷新Token[0m
[0;34m   请求: POST /auth/refresh[0m
{
  "user": {
    "id": 24,
    "username": "修复测试用户1424更新版",
    "avatarUrl": null,
    "status": 1,
    "createdAt": "2025-09-18T06:24:25.789Z",
    "updatedAt": "2025-09-18T06:24:26.655Z",
    "email": "t*******************5@example.com"
  },
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjI0LCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNzU4MTc2NjY2LCJleHAiOjE3NTgxODAyNjZ9.3zozDNecOFBXEeMV51SAHNkOopyQFH-WaI7bIoxWN3g",
  "refreshToken": "5e061e8f-28da-42b2-bdd8-0d33d3ee33e5"
}
[0;34m   ℹ️  HTTP状态码: 200[0m
[0;32m   ✅ Token刷新成功 - 直接格式正确[0m

[0;36m🧪 测试: 用户退出[0m
[0;34m   请求: POST /auth/logout[0m
[0;34m   ℹ️  HTTP状态码: 204[0m
[0;32m   ✅ 退出登录成功 - 状态码正确[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m7. 频率限制测试 - 检查是否修复[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;34m   ℹ️  测试注册频率限制（1分钟最多3次）[0m

[0;36m🧪 测试: 频率测试 1/4[0m
[0;34m   请求: POST /auth/register[0m
[0;34m   ℹ️  HTTP状态码: 409[0m
[0;31m   ❌ 第1次注册失败（应该成功）[0m
{
  "code": 409,
  "message": "邮箱已被注册",
  "data": null,
  "timestamp": "2025-09-18T06:24:27.042Z",
  "path": "/api/v1/auth/register",
  "method": "POST"
}

[0;36m🧪 测试: 频率测试 2/4[0m
[0;34m   请求: POST /auth/register[0m
[0;34m   ℹ️  HTTP状态码: 409[0m
[0;31m   ❌ 第2次注册失败（应该成功）[0m
{
  "code": 409,
  "message": "邮箱已被注册",
  "data": null,
  "timestamp": "2025-09-18T06:24:27.614Z",
  "path": "/api/v1/auth/register",
  "method": "POST"
}

[0;36m🧪 测试: 频率测试 3/4[0m
[0;34m   请求: POST /auth/register[0m
[0;34m   ℹ️  HTTP状态码: 429[0m
[0;31m   ❌ 第3次注册失败（应该成功）[0m
{
  "code": 429,
  "message": "ThrottlerException: Too Many Requests",
  "data": null,
  "timestamp": "2025-09-18T06:24:28.190Z",
  "path": "/api/v1/auth/register",
  "method": "POST"
}

[0;36m🧪 测试: 频率测试 4/4[0m
[0;34m   请求: POST /auth/register[0m
[0;34m   ℹ️  HTTP状态码: 429[0m
[0;32m   ✅ 第4次注册被限制（频率限制生效）[0m
{
  "code": 429,
  "message": "ThrottlerException: Too Many Requests",
  "data": null,
  "timestamp": "2025-09-18T06:24:28.762Z",
  "path": "/api/v1/auth/register",
  "method": "POST"
}

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m8. 错误处理测试[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m🧪 测试: 未认证访问[0m
[0;34m   请求: GET /auth/profile[0m
[0;34m   ℹ️  HTTP状态码: 401[0m
{
  "code": 401,
  "message": "Access token required",
  "data": null,
  "timestamp": "2025-09-18T06:24:29.338Z",
  "path": "/api/v1/auth/profile",
  "method": "GET"
}
[0;32m   ✅ 未认证访问被正确拒绝 - 包装格式正确[0m

[0;36m🧪 测试: 参数错误测试[0m
[0;34m   请求: POST /auth/login[0m
[0;34m   ℹ️  HTTP状态码: 400[0m
{
  "code": 400,
  "message": "type 必须是 phone 或 email",
  "data": null,
  "timestamp": "2025-09-18T06:24:29.441Z",
  "path": "/api/v1/auth/login",
  "method": "POST"
}
[0;32m   ✅ 参数错误被正确处理 - 包装格式正确[0m

[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;35m🏁 测试总结[0m
[0;35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;32m✅ 通过测试: 14[0m
[0;31m❌ 失败测试: 3[0m
[0;34m📊 总计测试: 17[0m
[0;36m📈 成功率: 82%[0m

[1;33m🔍 关键修复检查:[0m
[0;32m✅ 认证流程完整 - 可获取Token[0m

[0;34m📝 修复验证说明:[0m
[0;34m• 认证接口应返回直接格式（user, accessToken, refreshToken）[0m
[0;34m• 其他接口应返回包装格式（code, message, data, timestamp）[0m
[0;34m• 频率限制应在第4次注册时生效（HTTP 429）[0m
[0;34m• 如果以上都正确，说明修复成功，可以对接阿里云短信[0m

[1;33m⚠️  有 3 个测试失败，请检查修复[0m
